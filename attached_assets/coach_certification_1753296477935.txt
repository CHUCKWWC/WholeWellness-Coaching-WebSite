I'll provide a comprehensive guide to integrating this coach certification tracking system with a frontend application using Supabase and React/Next.js:

I'll provide a comprehensive guide to integrating the coach certification tracking system with a frontend application using Next.js and Supabase:

npx create-next-app@latest coach-certification-app
cd coach-certification-app
npm install @supabase/supabase-js @supabase/auth-helpers-nextjs @supabase/auth-helpers-react

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { Database } from './database.types' // Generate this from your database schema

export const supabase = createClientComponentClient<Database>()


'use client'
import { useState } from 'react'
import { supabase } from '@/lib/supabase/client'

export default function Auth() {
  const [email, setEmail] = useState('')
  const [error, setError] = useState<string | null>(null)

  const handleMagicLinkLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    setError(null)

    const { error } = await supabase.auth.signInWithOtp({
      email,
      options: {
        // Optional: specify a redirect to after login
        emailRedirectTo: `${window.location.origin}/dashboard`
      }
    })

    if (error) {
      setError(error.message)
    } else {
      alert('Check your email for the login link!')
    }
  }

  return (
    <div className="auth-container">
      <form onSubmit={handleMagicLinkLogin}>
        <h2>Coach Certification Login</h2>
        {error && <p className="error">{error}</p>}
        <input 
          type="email" 
          placeholder="Enter your email" 
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required 
        />
        <button type="submit">Send Magic Link</button>
      </form>
    </div>
  )
}

'use client'
import { useState, useEffect } from 'react'
import { supabase } from '@/lib/supabase/client'

type CertificationProgress = {
  module_id: number
  module_name: string
  status: string
  score: number | null
  completed_at: string | null
}

export default function CertificationDashboard() {
  const [progress, setProgress] = useState<CertificationProgress[]>([])
  const [selectedModule, setSelectedModule] = useState<number | null>(null)
  const [quizAnswers, setQuizAnswers] = useState<Record<string, string>>({})

  useEffect(() => {
    fetchCertificationProgress()
  }, [])

  const fetchCertificationProgress = async () => {
    const { data, error } = await supabase.rpc('get_certification_progress')
    if (error) {
      console.error('Error fetching progress:', error)
    } else {
      setProgress(data)
    }
  }

  const startModule = async (moduleId: number) => {
    try {
      const { data, error } = await supabase.rpc('start_certification_module', { p_module_id: moduleId })
      if (error) throw error
      setSelectedModule(moduleId)
    } catch (error) {
      console.error('Error starting module:', error)
    }
  }

  const submitQuiz = async () => {
    if (!selectedModule) return

    // Calculate score (simple example, replace with actual quiz logic)
    const totalQuestions = Object.keys(quizAnswers).length
    const correctAnswers = Object.values(quizAnswers).filter(answer => answer === 'correct').length
    const score = Math.round((correctAnswers / totalQuestions) * 100)

    try {
      const { data, error } = await supabase.rpc('submit_certification_quiz', {
        p_module_id: selectedModule,
        p_score: score,
        p_answers: JSON.stringify(quizAnswers)
      })

      if (error) throw error

      // Refresh progress after submission
      fetchCertificationProgress()
      setSelectedModule(null)
      setQuizAnswers({})
    } catch (error) {
      console.error('Error submitting quiz:', error)
    }
  }

  return (
    <div className="certification-dashboard">
      <h1>Coach Certification Modules</h1>
      {selectedModule ? (
        <div className="quiz-container">
          <h2>Module Quiz</h2>
          {/* Replace with actual quiz questions */}
          <div>
            <label>
              Sample Question 1
              <select 
                value={quizAnswers['q1'] || ''} 
                onChange={(e) => setQuizAnswers(prev => ({...prev, q1: e.target.value}))}
              >
                <option value="">Select Answer</option>
                <option value="correct">Correct Answer</option>
                <option value="incorrect">Incorrect Answer</option>
              </select>
            </label>
          </div>
          <button onClick={submitQuiz}>Submit Quiz</button>
        </div>
      ) : (
        <div className="modules-list">
          {progress.map(module => (
            <div key={module.module_id} className="module-card">
              <h3>{module.module_name}</h3>
              <p>Status: {module.status}</p>
              {module.score && <p>Score: {module.score}</p>}
              {module.status !== 'passed' && (
                <button onClick={() => startModule(module.module_id)}>
                  Start Module
                </button>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

import Auth from '@/components/Auth'
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { redirect } from 'next/navigation'
import CertificationDashboard from '@/components/CertificationDashboard'

export default async function Home() {
  const supabase = createServerComponentClient({ cookies })
  
  const { data: { session } } = await supabase.auth.getSession()

  if (!session) {
    return <Auth />
  }

  return <CertificationDashboard />
}


import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req, res })

  const { data: { session } } = await supabase.auth.getSession()

  return res
}



NEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key



.auth-container, 
.certification-dashboard {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
}

.module-card {
  border: 1px solid #ddd;
  padding: 15px;
  margin-bottom: 10px;
}

.error {
  color: red;
}


Key Integration Points:

Uses server-side authentication checks
Implements magic link login
Calls database functions directly from the client
Handles quiz submission and progress tracking
Responsive design with basic styling
Recommended Enhancements:

Add more robust error handling
Implement more complex quiz logic
Add loading states
Create more detailed quiz components
Implement role-based access control