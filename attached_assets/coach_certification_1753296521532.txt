'use client'
import { useState, useEffect } from 'react'
import { supabase } from '@/lib/supabase/client' // Assuming you have this client setup

// Define types for our data for better TypeScript support
type Module = {
  id: number;
  title: string;
  content: string;
  module_order: number;
};

type Certification = {
  module_id: number;
  status: string;
  score: number | null;
  answers: any;
  modules: Module; // This will hold the joined module data
};

export default function CertificationDashboard() {
  const [progress, setProgress] = useState<Certification[]>([])
  const [selectedModule, setSelectedModule] = useState<Module | null>(null)
  const [quizAnswers, setQuizAnswers] = useState<Record<string, string>>({})
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchCertificationProgress()
  }, [])

  const fetchCertificationProgress = async () => {
    setLoading(true);
    setError(null);

    // This query fetches the user's progress and joins it with the modules table
    // to get details like the module title.
    const { data, error } = await supabase
      .from('coach_certification')
      .select(`
        module_id,
        status,
        score,
        answers,
        modules (
          id,
          title,
          content,
          module_order
        )
      `)
      .order('module_order', { referencedTable: 'modules', ascending: true });


    if (error) {
      console.error('Error fetching progress:', error)
      setError('Could not fetch certification progress.');
    } else if (data) {
      setProgress(data as Certification[]);
    }
    setLoading(false);
  }

  const startModule = async (module: Module) => {
    // This function updates the status of a module to 'in_progress'
    const { error } = await supabase
      .from('coach_certification')
      .update({ status: 'in_progress' })
      .eq('module_id', module.id);
    
    if (error) {
        console.error('Error starting module:', error);
        setError('Could not start the module.');
    } else {
        setSelectedModule(module);
        fetchCertificationProgress(); // Refresh the state
    }
  }

  const submitQuiz = async () => {
    if (!selectedModule) return

    // Simple example of calculating a score
    const totalQuestions = 2; // Assuming 2 questions for this example
    const correctAnswers = Object.values(quizAnswers).filter(answer => answer === 'correct').length
    const score = Math.round((correctAnswers / totalQuestions) * 100)
    const newStatus = score >= 80 ? 'completed' : 'failed'; // Example passing score

    // This function updates the certification entry with the quiz results.
    const { error } = await supabase
      .from('coach_certification')
      .update({
        score: score,
        answers: quizAnswers,
        status: newStatus
      })
      .eq('module_id', selectedModule.id);

    if (error) {
      console.error('Error submitting quiz:', error)
      setError('Could not submit your quiz results.');
    } else {
      // Refresh progress and reset the view
      fetchCertificationProgress()
      setSelectedModule(null)
      setQuizAnswers({})
    }
  }

  if (loading) return <p>Loading your progress...</p>;
  if (error) return <p className="error">{error}</p>;

  return (
    <div className="certification-dashboard">
      <h1>Coach Certification Modules</h1>
      {selectedModule ? (
        <div className="quiz-container">
          <h2>{selectedModule.title} Quiz</h2>
          {/* You would dynamically render quiz questions from the module content */}
          <div dangerouslySetInnerHTML={{ __html: selectedModule.content || "" }} />
          
          <div>
            <label>
              Sample Question 1
              <select 
                value={quizAnswers['q1'] || ''} 
                onChange={(e) => setQuizAnswers(prev => ({...prev, q1: e.target.value}))}
              >
                <option value="">Select Answer</option>
                <option value="correct">Correct Answer</option>
                <option value="incorrect">Incorrect Answer</option>
              </select>
            </label>
          </div>
          <button onClick={submitQuiz}>Submit Quiz</button>
          <button onClick={() => setSelectedModule(null)}>Back to Modules</button>
        </div>
      ) : (
        <div className="modules-list">
          {progress.map(item => (
            <div key={item.module_id} className="module-card">
              <h3>{item.modules.title}</h3>
              <p>Status: {item.status}</p>
              {item.score !== null && <p>Score: {item.score}%</p>}
              {item.status !== 'completed' && (
                <button onClick={() => startModule(item.modules)}>
                  {item.status === 'in_progress' || item.status === 'failed' ? 'Retry Module' : 'Start Module'}
                </button>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  )
}
